---
# This is intentionally very monolithic.
# The aim is to have per-machine tasks variables defined here as they don't need to be repeated, as well as variables that are only used in external modules.
#
# Every host
- name: Base
  hosts: all
  roles:
    - role: geerlingguy.repo-epel
      become: true
      when:
        - ansible_os_family == "RedHat"
        - ansible_distribution != "Fedora"
    - role: buluma.rpmfusion
      become: true
      when:
        - ansible_distribution == "Fedora"
    - system
    - editor
    - backups
    - firewall
    - containers
    - terminal
    - artis3n.tailscale.machine
    - notifications
# Groups
- name: Server base
  hosts: servers
  roles:
    - reverse_proxy
- name: Client base
  hosts: clients
  tasks:
    - name: Install packages
      ansible.builtin.import_tasks: common/tasks/install_packages.yml
      vars:
        packages:
          - bash-color-prompt
          - fd-find
  roles:
    - credentials
    - automation
    - version_control
    - file_manager
    - feed_client
    - pim_client
    - email_client
- name: Physical box specific roles
  hosts: boxes
  roles:
    - hardware
    - disks
- name: Interactive box specific roles
  hosts: interactive_boxes
  roles:
    - file_sync
    - ide
  tasks:
    - name: Install packages
      ansible.builtin.import_tasks: common/tasks/install_packages.yml
      vars:
        packages:
          # I also use Firefox, GNOME pim apps, etc,
          # but (as of right now) I standardized on GNOME and this software comes shipped with Fedora Workstation--so there's no use in automating it.
          - geary
          - gnome-extensions-app
          - gnome-shell-extension-caffeine
          # This is needed to have Adwaita Dark on gtk3 applications in recent GNOME.
          - adw-gtk3-theme
          - gnome-tweaks
    - name: Install flatpak packages
      ansible.builtin.import_tasks: common/tasks/install_flatpak_packages.yml
      vars:
        flatpaks:
          - md.obsidian.Obsidian
          - com.parsecgaming.parsec
          - com.moonlight_stream.Moonlight
          - net.ankiweb.Anki
          - com.discordapp.Discord
          - io.gitlab.news_flash.NewsFlash
          - com.spotify.Client
          # Needed to set SIGNAL_PASSWORD_STORE=gnome-libsecret for Signal
          - com.github.tchx84.Flatseal
          - org.signal.Signal
          # For Web Apps
          - org.gnome.Epiphany
- name: Hypervisor specific roles
  hosts: hypervisors
  roles:
    - virtualization
    - admin_interface
# Individual machines
- name: Nuc specific roles
  hosts: nuc
  tasks:
    - name: Mount internal drive
      become: true
      ansible.posix.mount:
        path: /mnt
        src: UUID=920c3284-0edc-485a-9fe8-7eb9b646a7f7
        fstype: auto
        opts: nofail
        state: mounted
    - name: Check /var/lib/libvirt/images
      become: true
      ansible.builtin.stat:
        path: /var/lib/libvirt/images
        follow: false
      register: libvirt_images_dir
    - name: Check /var/lib/libvirt/images for existing files
      ansible.builtin.find:
        paths: /var/lib/libvirt/images
        file_type: any
        hidden: true
        recurse: true
      register: libvirt_images_contents
      when: libvirt_images_dir.stat.isdir
    - name: Abort if /var/lib/libvirt/images is not empty
      ansible.builtin.fail:
        msg: "Failing!  Libvirt image directory is not empty."
      when:
        - libvirt_images_dir.stat.isdir
        - (libvirt_images_contents.matched | default(0)) > 0
    - name: Remove /var/lib/libvirt/images (if it is an empty directory)
      become: true
      ansible.builtin.file:
        path: /var/lib/libvirt/images
        state: absent
      # Could be overkill--but I am being incredibly careful here to not delete any vms.
      when:
        - libvirt_images_dir.stat.exists
        - libvirt_images_dir.stat.isdir
        - libvirt_images_dir.stat.lnk_source is not defined
        - (libvirt_images_contents.matched | default(0)) == 0
    - name: Link libvirt images
      become: true
      ansible.builtin.file:
        src: /mnt/libvirt/images
        dest: /var/lib/libvirt/images
        state: link
    - name: Mount home sub-directories
      become: true
      ansible.posix.mount:
        path: "/home/{{ nfs_home_user }}/{{ item }}"
        src: "{{ lookup('dig', hostvars['workstation']['domain_name']) }}:/home/{{ nfs_home_user }}/{{ item }}"
        fstype: nfs
        opts: x-systemd.automount,_netdev,nofail,x-systemd.mount-timeout=15s,x-systemd.idle-timeout=45s,soft,timeo=200,retrans=10
        state: present
      loop:
        - Desktop
        - Documents
        - Downloads
        - Music
        - Pictures
        - Public
        - Templates
        - Videos
  roles:
    - photos
    - file_sync
    - feed_reader
    - bookmarks
    - ebooks
    - audiobooks
    - version_control_server
    - ai_client
    - note_server
    - idea_board
- name: Workstation specific roles
  hosts: workstation
  tasks:
    - name: Install packages
      ansible.builtin.import_tasks: common/tasks/install_packages.yml
      vars:
        packages:
          - intel-media-driver
  roles:
    - role: geerlingguy.nfs
      become: true
      vars:
        nfs_opts: "rw,sync,no_subtree_check,no_root_squash"
        nfs_exports:
          - "/home/{{ ansible_env.USER }}/Desktop   {{ lookup('dig', hostvars['nuc']['domain_name']) }}({{ nfs_opts }})"
          - "/home/{{ ansible_env.USER }}/Documents {{ lookup('dig', hostvars['nuc']['domain_name']) }}({{ nfs_opts }})"
          - "/home/{{ ansible_env.USER }}/Downloads {{ lookup('dig', hostvars['nuc']['domain_name']) }}({{ nfs_opts }})"
          - "/home/{{ ansible_env.USER }}/Music     {{ lookup('dig', hostvars['nuc']['domain_name']) }}({{ nfs_opts }})"
          - "/home/{{ ansible_env.USER }}/Pictures  {{ lookup('dig', hostvars['nuc']['domain_name']) }}({{ nfs_opts }})"
          - "/home/{{ ansible_env.USER }}/Public    {{ lookup('dig', hostvars['nuc']['domain_name']) }}({{ nfs_opts }})"
          - "/home/{{ ansible_env.USER }}/Templates {{ lookup('dig', hostvars['nuc']['domain_name']) }}({{ nfs_opts }})"
          - "/home/{{ ansible_env.USER }}/Videos    {{ lookup('dig', hostvars['nuc']['domain_name']) }}({{ nfs_opts }})"
- name: Recipe_vps specific roles
  hosts: recipe_vps
  roles:
    - recipes
    - ai_client
